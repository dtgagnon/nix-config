{ lib
, config
, namespace
, osConfig ? { }
, ...
}:
let
  inherit (lib) types mkIf;
  inherit (lib.${namespace}) mkOption mkBoolOpt;
  cfg = config.${namespace}.preservation;
in
{
  options.${namespace}.preservation = with types; {
    enable = mkBoolOpt true "Whether to configure the user account.";
    #   homeDirs = mkOpt
    # 	(listOf (coercedTo str (d: { directory = d; }) (submodule [
    # 		{
    # 			_module.args.defaultOwner = attrs.config.username;
    # 			mountOptions = attrs.config.commonMountOptions;
    # 		}
    # 		directoryPath
    # 	])
    # 	)) [ ]
    #       "Declare additional user home directories to persist";
    #   homeFiles =
    #     mkOpt (listOf str) [ ]
    #       "Declare additional user home files to persist";
    #
    # commonMountOptions = mkOpt (listOf (coercedTo str (n: { name = n; }) mountOption)) [ ] "List of mount options that should be added to all files and directories of the user for which how = bindmount";
    homeDirs = mkOption {
      type =
        with lib.types;
        listOf (
          coercedTo str (d: { directory = d; }) (submodule [
            {
              _module.args.defaultOwner = attrs.config.username;
              mountOptions = attrs.config.commonMountOptions;
            }
            directoryPath
          ])
        );
      default = [ ];
      apply = map (d: d // { directory = "${attrs.config.home}/${d.directory}"; });
      description = ''
        Specify a list of directories that should be preserved for this user.
        The paths are interpreted relative to {option}`home`.
      '';
      example = [ ".rabbit_hole" ];
    };
    homeFiles = mkOption {
      type =
        with lib.types;
        listOf (
          coercedTo str (f: { file = f; }) (submodule [
            {
              _module.args.defaultOwner = attrs.config.username;
              mountOptions = attrs.config.commonMountOptions;
            }
            filePath
          ])
        );
      default = [ ];
      apply = map (f: f // { file = "${attrs.config.home}/${f.file}"; });
      description = ''
        Specify a list of files that should be preserved for this user.
        The paths are interpreted relative to {option}`home`.
      '';
      #   ```nix
      #   [
      #     {
      #       file = ".config/foo";
      #       mode = "0600";
      #     }
      #     "bar"
      #   ]
      #   ```
    };
  };


  config = mkIf cfg.enable {
    inherit (cfg) homeDirs homeFiles;
  };
}
